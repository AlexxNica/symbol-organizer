var onRun = function(context) {
	var pluginName = "Symbol Organizer";

	// Document variables
	var doc = context.document;
	var command = context.command;
	var page = doc.currentPage();

	// If the symbols page is not selected...
	if (page.name() != 'Symbols') {
		// Feedback to user
		displayDialog("Please select your symbols page.",pluginName);
	} else {
		// If the document has symbols...
		if (docHasSymbols()) {
			// Get layout settings
			var layoutSettings = getLayoutSettings();

			// If layout settings were provided...
			if (layoutSettings) {
				// Layout variables
				var x = 0;
				var y = 0;
				var xPad = parseInt(layoutSettings.xPad);
				var yPad = parseInt(layoutSettings.yPad);
				var maxPer = (layoutSettings.maxPer > 0) ? layoutSettings.maxPer : 0;

				// Title variables
				var titleGroupName = 'Titles';
				var titleStyleName = 'Symbol Group Title';
				var titleStyleFont = 'Helvetica Neue Medium Italic';
				var titleTextSize = 20;
				var titleTextHeight = 24;
				var titleTextAlign = (layoutSettings.sortDirection == 0) ? 0 : 1;
				var titleGroupX = (layoutSettings.sortDirection == 0) ? 0 : -xPad;
				var titleGroupY = (layoutSettings.sortDirection == 0) ? -(titleTextHeight+yPad) : 0;

				// If user wants to remove unused symbols...
				if (layoutSettings.removeSymbols == 1) {
					// Run function to remove symbols and set removed symbol count
					var removedCount = removeUnusedSymbols();
				}

				// Find titles group
				var titleGroup = findLayerByName(page,titleGroupName);

				// If titles group exists, remove it
				if (titleGroup) page.removeLayer(titleGroup);

				// If the document still has symbols...
				if (docHasSymbols()) {
					// Create a symbols object
					var symbols = doc.documentData().allSymbols();

					// Sort the symbols object by name
					var sortByName = [NSSortDescriptor sortDescriptorWithKey:"name" ascending:1];
					symbols = [symbols sortedArrayUsingDescriptors:[sortByName]];

					// Sort the layer list
					sortLayerList(symbols,layoutSettings.sortOrder);

					// Create the group object
					var groupLayout = createGroupObject(symbols,layoutSettings.groupDepth);

					// Reset page origin
					page.setRulerBase(CGPointMake(0,0));

					// If user wants to display group titles...
					if (layoutSettings.displayTitles == 1) {
						// Add title style
						addTextStyle(titleStyleName,titleStyleFont,titleTextSize,titleTextHeight,titleTextAlign);

						// Add title group
						titleGroup = addLayerGroup(page,titleGroupName,titleGroupX,titleGroupY,true);

						// Set clickThrough and lock title group
						titleGroup.setIsLocked(true);
						titleGroup.setHasClickThrough(true);
					}

					// Set tracker/counters
					var groupSpace = 0;
					var groupCount = 1;
					var objectCount = 1;

					// Iterate through the group object
					for (var i = 0; i < groupLayout.length; i++) {
						// Symbol variables
						var symbol = symbols.objectAtIndex(i);
						var symbolFrame = symbol.frame();

						// If user wants to display titles, and this is the first item in the first group, or a brand new group...
						if (layoutSettings.displayTitles == 1 && (objectCount == 1 || groupCount != groupLayout[i]['group'])) {
							// Title position variables
							var titleTextX = 0;
							var titleTextY = 0;
							var titleTextAlign = 0;

							// Update title position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								titleTextX = (objectCount == 1) ? 0 : x+groupSpace+xPad;
							} else {
								titleTextY = (objectCount == 1) ? 0 : y+groupSpace+yPad;
								titleTextAlign = 1;
							}

							// Add the title into the title group
							addGroupTitle(titleGroup,groupLayout[i]['prefix'],titleTextX,titleTextY,titleTextAlign);
						}

						// If the current group number doesn't match the group counter
						if (groupLayout[i]['group'] != groupCount) {
							// Update group position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								// Reset y position, set the x position of the next row
								y = 0;
								x += groupSpace + xPad;
							} else {
								// Reset x position, set the y position of the next row
								x = 0;
								y += groupSpace + yPad;
							}

							// Reset the group space tracker
							groupSpace = 0;

							// Increment the group counter
							groupCount++;

							// Reset the object counter
							objectCount = 1;
						}

						// If the max per row is greater than 0, and object count is greater than max per row
						if (maxPer > 0 && objectCount > maxPer) {
							// Update group position variables per the layout direction
							if (layoutSettings.sortDirection == 0) {
								// Reset y position, set the x position of the next row
								y = 0;
								x += groupSpace + xPad;
							} else {
								// Reset x position, set the y position of the next row
								x = 0;
								y += groupSpace + yPad;
							}

							// Reset the group space tracker
							groupSpace = 0;

							// Reset the object counter
							objectCount = 1;
						}

						// Position the symbol
						symbolFrame.x = x;
						symbolFrame.y = y;

						// Update group position variables per the layout direction
						if (layoutSettings.sortDirection == 0) {
							// If this symbol is wider than previous symbols in row
							if (symbolFrame.width() > groupSpace) {
								// Increase the width of the row
								groupSpace = symbolFrame.width();
							}

							// Set the y position for the next symbol
							y += symbolFrame.height() + yPad;
						} else {
							// If this symbol is taller than previous symbols in row
							if (symbolFrame.height() > groupSpace) {
								// Increase the height of the row
								groupSpace = symbolFrame.height();
							}

							// Set the x position for the next symbol
							x += symbolFrame.width() + xPad;
						}

						// Increment the object counter
						objectCount++;
					}

					// If user wants to display group titles...
					if (layoutSettings.displayTitles == 1) {
						// Resize the titles group to ensure dimensions reflect contents
						titleGroup.resizeToFitChildrenWithOption(0);
					}

					// Feedback to user
					if (layoutSettings.removeSymbols == 1 && removedCount > 0) {
						doc.showMessage("Symbol layout complete! " + removedCount + " unused symbols were removed.");
					} else {
						doc.showMessage("Symbol layout complete!");
					}
				}
			}
		}
	}

	function displayDialog(body,title) {
		var app = NSApplication.sharedApplication();
		app.displayDialog_withTitle(body,title);
	}

	function docHasSymbols() {
		if (context.document.documentData().allSymbols().count() == 0) {
			displayDialog("There are no symbols to organize.",pluginName);
			return false;
		} return true;
	}

	function getLayoutSettings() {
		// Setting variables
		var groupOptions = ['Label/','Label/Label/','Label/Label/Label/','Label/Label/Label/Label/'];
		var groupDepth = 1;
		var sortOrderOptions = ['A-Z','Z-A'];
		var sortOrder = 1;
		var sortDirectionOptions = ['Horizontal','Vertical'];
		var sortDirection = 0;
		var maxPer = '';
		var xPad = '100';
		var yPad = '100';
		var displayTitles = 0;
		var removeSymbols = 0;

		// Get cached settings
		try {
			if ([command valueForKey:"groupDepth" onLayer:page]) {
				groupDepth = [command valueForKey:"groupDepth" onLayer:page];
			}

			if ([command valueForKey:"sortOrder" onLayer:page]) {
				sortOrder = [command valueForKey:"sortOrder" onLayer:page];
			}

			if ([command valueForKey:"sortDirection" onLayer:page]) {
				sortDirection = [command valueForKey:"sortDirection" onLayer:page];
			}

			if ([command valueForKey:"xPad" onLayer:page]) {
				xPad = [command valueForKey:"xPad" onLayer:page];
			}

			if ([command valueForKey:"yPad" onLayer:page]) {
				yPad = [command valueForKey:"yPad" onLayer:page];
			}

			if ([command valueForKey:"maxPer" onLayer:page]) {
				maxPer = [command valueForKey:"maxPer" onLayer:page];
			}

			if ([command valueForKey:"displayTitles" onLayer:page]) {
				displayTitles = [command valueForKey:"displayTitles" onLayer:page];
			}
		} catch(err) {
			log("Unable to fetch settings.");
		}

		var alertWindow = COSAlertWindow.new();
		alertWindow.setIcon(NSImage.alloc().initByReferencingFile(context.plugin.urlForResourceNamed("icon.png").path()));
		alertWindow.setMessageText(pluginName);

		alertWindow.addTextLabelWithValue('Granularity:');
		alertWindow.addAccessoryView(createSelect(groupOptions,groupDepth,NSMakeRect(0,0,180,25)));
		var fieldOne = alertWindow.viewAtIndex(1);

		alertWindow.addTextLabelWithValue('Sort order:');
		alertWindow.addAccessoryView(createRadioButtons(sortOrderOptions,sortOrder));
		var fieldTwo = alertWindow.viewAtIndex(3);

		alertWindow.addTextLabelWithValue('Sort direction:');
		alertWindow.addAccessoryView(createRadioButtons(sortDirectionOptions,sortDirection));
		var fieldThree = alertWindow.viewAtIndex(5);

		alertWindow.addTextLabelWithValue('Max per row/column:');
		alertWindow.addAccessoryView(createField(maxPer,NSMakeRect(0,0,60,20)));
		var fieldFour = alertWindow.viewAtIndex(7);

		alertWindow.addTextLabelWithValue('Horizontal spacing:');
		alertWindow.addAccessoryView(createField(xPad,NSMakeRect(0,0,60,20)));
		var fieldFive = alertWindow.viewAtIndex(9);

		alertWindow.addTextLabelWithValue('Vertical spacing:');
		alertWindow.addAccessoryView(createField(yPad,NSMakeRect(0,0,60,20)));
		var fieldSix = alertWindow.viewAtIndex(11);

		alertWindow.addAccessoryView(createLabel('',12,NSMakeRect(0,0,0,0)));
		alertWindow.addAccessoryView(createCheckbox({name:"Display symbol group titles",value:1},displayTitles,NSMakeRect(0,0,300,30)));
		var fieldSeven = alertWindow.viewAtIndex(13);

		alertWindow.addAccessoryView(createCheckbox({name:"Remove unused symbols\n*Do not use this if you have nested symbols or\nmake use of symbol overrides!",value:1},removeSymbols,NSMakeRect(0,0,300,60)));
		var fieldEight = alertWindow.viewAtIndex(14);

		alertWindow.addButtonWithTitle('OK');
		alertWindow.addButtonWithTitle('Cancel');

		// Set first responder and key order
		alertWindow.alert().window().setInitialFirstResponder(fieldOne);
		fieldOne.setNextKeyView(fieldTwo);
		fieldTwo.setNextKeyView(fieldThree);
		fieldThree.setNextKeyView(fieldFour);
		fieldFour.setNextKeyView(fieldFive);
		fieldFive.setNextKeyView(fieldSix);
		fieldSix.setNextKeyView(fieldSeven);
		fieldSeven.setNextKeyView(fieldEight);

		var responseCode = alertWindow.runModal();

		if (responseCode == 1000) {
			try {
				[command setValue:[[alertWindow viewAtIndex:1] indexOfSelectedItem] forKey:"groupDepth" onLayer:page];
				[command setValue:[[[alertWindow viewAtIndex:3] selectedCell] tag] forKey:"sortOrder" onLayer:page];
				[command setValue:[[[alertWindow viewAtIndex:5] selectedCell] tag] forKey:"sortDirection" onLayer:page];
				[command setValue:[[alertWindow viewAtIndex:7] stringValue] forKey:"maxPer" onLayer:page];
				[command setValue:[[alertWindow viewAtIndex:9] stringValue] forKey:"xPad" onLayer:page];
				[command setValue:[[alertWindow viewAtIndex:11] stringValue] forKey:"yPad" onLayer:page];
				[command setValue:[[alertWindow viewAtIndex:13] state] forKey:"displayTitles" onLayer:page];
				[command setValue:0 forKey:"removeSymbols" onLayer:page];
			} catch(err) {
				log("Unable to save settings.");
			}

			return {
				groupDepth : [[alertWindow viewAtIndex:1] indexOfSelectedItem],
				sortOrder : [[[alertWindow viewAtIndex:3] selectedCell] tag],
				sortDirection : [[[alertWindow viewAtIndex:5] selectedCell] tag],
				maxPer : [[alertWindow viewAtIndex:7] stringValue],
				xPad : [[alertWindow viewAtIndex:9] stringValue],
				yPad : [[alertWindow viewAtIndex:11] stringValue],
				displayTitles : [[alertWindow viewAtIndex:13] state],
				removeSymbols : [[alertWindow viewAtIndex:14] state]
			}
		} else return false;
	}

	function createSelect(items,selectedItemIndex,frame) {
		selectedItemIndex = (selectedItemIndex > -1) ? selectedItemIndex : 0;
		var comboBox = [[NSComboBox alloc] initWithFrame:frame];
		[comboBox addItemsWithObjectValues:items];
		[comboBox selectItemAtIndex:selectedItemIndex];

		return comboBox;
	}

	function createRadioButtons(options,selected) {
		// Set number of rows and columns
		var rows = options.length;
		var columns = 1;

		// Make a prototype cell
		var buttonCell = [[NSButtonCell alloc] init];
		[buttonCell setButtonType:NSRadioButton]

		// Make a matrix to contain the radio cells
		var buttonMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(20,20,300,rows*25) mode:NSRadioModeMatrix prototype:buttonCell numberOfRows:rows numberOfColumns:columns];
		[buttonMatrix setCellSize: NSMakeSize(300,20)];

		// Create a cell for each option
		for (i = 0; i < options.length; i++) {
			[[[buttonMatrix cells] objectAtIndex: i] setTitle: options[i]];
			[[[buttonMatrix cells] objectAtIndex: i] setTag: i];
		}

		// Select the default cell
		[buttonMatrix selectCellAtRow:selected column:0]

		// Return the matrix
		return buttonMatrix;
	}

	function createField(value,frame) {
		var field = [[NSTextField alloc] initWithFrame:frame];
		[field setStringValue:value];

		return field;
	}

	function createLabel(text,size,frame) {
		var label = [[NSTextField alloc] initWithFrame:frame];
		[label setStringValue:text];
		[label setFont:[NSFont boldSystemFontOfSize:size]];
		[label setBezeled:false];
		[label setDrawsBackground:false];
		[label setEditable:false];
		[label setSelectable:false];

		return label;
	}

	function createCheckbox(item,flag,frame) {
		flag = ( flag == false ) ? NSOffState : NSOnState;
		var checkbox = [[NSButton alloc] initWithFrame:frame];
		[checkbox setButtonType: NSSwitchButton];
		[checkbox setBezelStyle: 0];
		[checkbox setTitle: item.name];
		[checkbox setTag: item.value];
		[checkbox setState: flag];

		return checkbox;
	}

	function removeUnusedSymbols() {
		var symbols = context.document.documentData().allSymbols();
		var removedSymbolCount = 0;

		for (var i = 0; i < symbols.count(); i++) {
			var symbol = symbols.objectAtIndex(i);

			if (!symbol.hasInstances()) {
				symbol.removeFromParent();
				removedSymbolCount++;
			}
		}

		return removedSymbolCount;
	}

	function findLayerByName(scope,name,type) {
		var scope = scope.layers();

		if (scope) {
			for (var i = 0; i < scope.count(); i++) {
				var layerName = scope.objectAtIndex(i).name().trim();

				if ((!type && layerName == name) || (type && layerName == name && scope.objectAtIndex(i) instanceof type)) {
					return scope.objectAtIndex(i);
				}
			}
		}

		return false;
	}

	function sortLayerList(symbols,order) {
		var layerList = (order == 0) ? [[symbols reverseObjectEnumerator] allObjects] : symbols;

		var symbols = context.document.documentData().allSymbols();
		var symbolPage = doc.currentPage();
		var symbolIndices = [];
		var symbolLoop = symbols.objectEnumerator();
		var symbol;

		while (symbol = symbolLoop.nextObject()) {
			symbolIndices.push(symbolPage.indexOfLayer(symbol));
		}

		var removeLoop = symbols.objectEnumerator();
		var symbolToRemove;

		while (symbolToRemove = removeLoop.nextObject()) {
			symbolToRemove.removeFromParent();
		}

		for (var i = 0; i < symbolIndices.length; i++) {
			[symbolPage insertLayers:[NSArray arrayWithObject:layerList[i]] atIndex:symbolIndices[i]];
		}
	}

	function createGroupObject(symbols,depth) {
		// Group variables
		var groupCount = 0;
		var groupLayout = [];
		var lastGroupPrefix;

		// Iterate through the symbols
		for (var i = 0; i < symbols.count(); i++) {
			// Symbol variables
			var symbol = symbols.objectAtIndex(i);
			var symbolName = symbol.name();

			// Determine a break point in the symbol name
			var breakPoint = (symbolName.indexOf("/") != -1) ? getCharPosition(symbolName,"/",depth+1) : 0;

			// Set a prefix for current group
			var thisGroupPrefix = (breakPoint > 0) ? symbolName.slice(0,breakPoint) : symbolName;

			// If this group prefix is not the same as last group
			if (lastGroupPrefix != thisGroupPrefix) {
				// Increment the group counter
				groupCount++;
			}

			// Add an entry to the group object
			groupLayout.push({
				prefix: thisGroupPrefix,
				group: groupCount
			});

			// Set the last group prefix to current prefix
			lastGroupPrefix = thisGroupPrefix;
		}

		return groupLayout;
	}

	function getCharPosition(string,match,count) {
		var actualCount = string.split(match).length - 1;

		if (actualCount < count) {
			return string.split(match,actualCount).join(match).length;
		} else {
			return string.split(match,count).join(match).length;
		}
	}

	function addTextStyle(styleName,fontName,fontSize,fontLineHeight,textAlignment) {
		getTextStyleByName(styleName,1);

		var textStyles = doc.documentData().layerTextStyles();

		var textStyle = [[MSTextLayer alloc] initWithFrame:nil];
		textStyle.setFontSize(fontSize);
		textStyle.setLineHeight(fontLineHeight);
		textStyle.setTextAlignment(textAlignment);
		textStyle.setFontPostscriptName(fontName);

		textStyles.addSharedStyleWithName_firstInstance(styleName,textStyle.style());
	}

	function getTextStyleByName(styleName,removeStyle) {
		var textStyles = doc.documentData().layerTextStyles().objects();

		if (textStyles) {
			for (var i = 0; i < textStyles.count(); i++) {
				if (textStyles.objectAtIndex(i).name() == styleName) {
					if (removeStyle && removeStyle == 1) {
						doc.documentData().layerTextStyles().removeSharedStyle(textStyles.objectAtIndex(i));
						return false;
					} else {
						return textStyles.objectAtIndex(i);
					}
				}
			}
		}

		return false;
	}

	function addLayerGroup(output,layerName,x,y,isUnique) {
		var layerGroup = findLayerByName(output,layerName);

		if (isUnique && layerGroup) {
			layerGroup.frame().setX(x);
			layerGroup.frame().setY(y);
		} else {
			layerGroup = MSLayerGroup.new();
			layerGroup.setName(layerName);
			layerGroup.frame().setX(x);
			layerGroup.frame().setY(y);

			output.addLayers([layerGroup]);
		}

		return layerGroup;
	}

	function addGroupTitle(titleGroup,title,x,y,alignment) {
		// Add screen title
		var screenTitle = addTextLayer(titleGroup,title,title,0,false);

		// Set screen title position
		if (alignment == 0) {
			screenTitle.frame().setY(y);
			screenTitle.frame().setX(x);
		} else {
			screenTitle.frame().setY(y);
			screenTitle.frame().setX(x-screenTitle.frame().width());
		}

		var screenTitleStyle = getTextStyleByName(titleStyleName);

		// Set screen title style
		screenTitle.setStyle(screenTitleStyle.newInstance());
	}

	function addTextLayer(output,layerName,layerValue,layerWidth,isLocked) {
		var textLayer = MSTextLayer.new();
		textLayer.setStringValue(layerValue);
		textLayer.setName(layerName);
		textLayer.setIsLocked(isLocked);

		if (layerWidth > 0) {
			textLayer.setTextBehaviour(1);
			textLayer.frame().setWidth(layerWidth);
		}

		output.addLayers([textLayer]);

		return textLayer;
	}
};
